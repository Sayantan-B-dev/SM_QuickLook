import React, { useState } from "react";
import "../../../../CSS/JAVA.css";
import { title } from "framer-motion/client";

const units = [
  {
    title: "UNIT 1 : Introduction to Java",
    topics: [
      {
        title: "Introduction",
        links: [
          {
            title: "Basics of Java",
            url: "https://www.geeksforgeeks.org/java-programming-basics/",
            img: "https://www.refreshjava.com/images/java/programmingTerms.png",
            info: "Java is a high-level, object-oriented programming language developed by Sun Microsystems. It is platform-independent, meaning code written in Java can run on any system that has the Java Virtual Machine (JVM). It supports core features like encapsulation, inheritance, polymorphism, and abstraction.",
            code: `
public class BasicsExample {
  public static void main(String[] args) {
    int a = 10;
    int b = 5;
    int sum = a + b;
    System.out.println("Sum: " + sum);
  }
}`
          },
          {
            title: "Background/History of Java",
            url: "https://www.geeksforgeeks.org/the-complete-history-of-java-programming-language/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20190502181004/History-of-Java.jpg",
            info: "Java was initiated in 1991 as part of the Green Project by James Gosling and others at Sun Microsystems. It was originally named 'Oak' but was later renamed to 'Java' in 1995. The language was intended for interactive television but evolved to support internet programming and enterprise software. Java's release coincided with the internet boom, making it a key technology.",
            code: `// Java was originally named 'Oak', later renamed to 'Java' in 1995.`
          },
          {
            title: "Java and the Internet",
            url: "https://cs.smu.ca/~porter/csc/465/notes/net/starthere.html",
            img: "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUfdz-jyYBlnLGCwMjRnbNBatGqVT97vw0QPWswpfvtMNJurncqrJEi6aOPDNslF05RJ5RIC0dEKrTEYbnQEEQAOtNLX-6oU43EW4VDvrUCUsjy-GkC9hnnfP7psOXePvRTJRE5P9Y9Mo/w1200-h630-p-k-no-nu/java+and+internet.png",
            info: "Java was designed to support network-based and distributed applications. Its security model and the ability to download applets and run them in a sandboxed environment made it ideal for early web applications. The java.net package provides classes for implementing networking features like sockets and URL handling.",
            code: `
import java.net.*;

public class InternetExample {
  public static void main(String[] args) {
    try {
      URL url = new URL("https://www.example.com");
      System.out.println("Protocol: " + url.getProtocol());
      System.out.println("Host: " + url.getHost());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}`
          },
          {
            title: "Advantages of Java",
            url: "https://www.geeksforgeeks.org/advantages-and-disadvantages-of-java/",
            img: "https://techvidvan.com/tutorials/wp-content/uploads/2020/06/Pros-Cons-of-Java-tv-1.jpg",
            info: "Some key advantages of Java include:\n- Platform independence via the JVM\n- Object-oriented design for modular, reusable code\n- Automatic memory management with garbage collection\n- Strong security features, especially in networked environments\n- Multithreading capabilities for better performance\n- Rich standard library for rapid development\nThese features make Java a preferred choice for enterprise, mobile, and web-based applications.",
            code: `// Java is platform-independent, secure, multithreaded, and object-oriented.`
          }
        ],
      }
      ,
      {
        title: "Java",
        links: [
          {
            title: "Java Virtual Machine",
            url: "https://www.geeksforgeeks.org/jvm-works-jvm-architecture/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20240903150527/Class-Loader.webp",
            info: "The Java Virtual Machine (JVM) is an abstract machine that enables your computer to run Java programs. It converts compiled Java bytecode into machine code at runtime, making Java platform-independent. JVM also handles memory management, garbage collection, and security.",
            code: `// JVM executes Java bytecode and makes Java platform-independent.`
          },
          {
            title: "Byte Code",
            url: "https://www.geeksforgeeks.org/byte-code-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20211006134014/Bytecode.png",
            info: "Bytecode is the intermediate representation of a Java program. It is generated by the Java compiler (.class file) and interpreted or compiled at runtime by the JVM. Bytecode is platform-independent and secure.",
            code: `
public class ByteCodeExample {
  public static void main(String[] args) {
    System.out.println("This Java code will be compiled into bytecode.");
  }
}
// Compiling this file creates a .class file containing bytecode.
`
          },
          {
            title: "Java Environment Setup",
            url: "https://www.geeksforgeeks.org/setting-environment-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20250307160741001506/Verify-Java-Version.webp",
            info: "To set up the Java environment:\n1. Download and install the JDK (Java Development Kit)\n2. Set the `JAVA_HOME` environment variable\n3. Add `bin` directory to system PATH\n4. Verify using `java -version` and `javac -version` in terminal",
            code: `
// Commands to verify setup in terminal:
java -version
javac -version
// Sample Output:
// java version "17.0.2" 2022-01-18 LTS
// javac 17.0.2
`
          },
          {
            title: "Java Program Structure",
            url: "https://www.geeksforgeeks.org/structure-members-java-program/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/Structure-2.jpg",
            info: "A typical Java program includes:\n- Package declaration (optional)\n- Import statements\n- Class definition\n- main() method as the entry point\n- Statements and logic inside main()",
            code: `
import java.util.*;

public class StructureExample {
  public static void main(String[] args) {
    System.out.println("This is the structure of a basic Java program.");
  }
}`
          },
          {
            title: "Procedure-Oriented vs. Object-Oriented Programming concept",
            url: "https://www.geeksforgeeks.org/differences-between-procedural-and-object-oriented-programming/",
            img: "https://api.reliasoftware.com/uploads/difference_between_procedural_and_object_oriented_programming_5b9f68595a.webp",
            info: "Procedure-Oriented Programming (POP) focuses on functions and procedures to operate on data. It follows a top-down approach. Examples: C, Pascal.\nObject-Oriented Programming (OOP) focuses on data and objects, bundling data and methods together. It follows a bottom-up approach. Java, C++, and Python support OOP.",
            code: `
// POP style (C-like pseudocode)
int add(int a, int b) {
  return a + b;
}

// OOP style in Java
class Calculator {
  int add(int a, int b) {
    return a + b;
  }
}`
          }
        ]
      }
      ,
      {
        title: "Basics of OOP",
        links: [
          {
            title: "Abstraction",
            url: "https://www.geeksforgeeks.org/introduction-of-object-oriented-programming/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20200901221937/Object-660x185.png",
            info: "Abstraction is the process of hiding implementation details and showing only essential features. It allows focusing on what an object does rather than how it does it.",
            code: `
abstract class Animal {
  abstract void makeSound();
}

class Dog extends Animal {
  void makeSound() {
    System.out.println("Bark");
  }
}
`
          },
          {
            title: "Inheritance",
            url: "https://www.geeksforgeeks.org/inheritance-in-java/",
            img: "https://www.tutorialspoint.com/java/images/types_of_inheritance.jpg",
            info: "Inheritance is an OOP concept where a class (subclass) inherits properties and behavior from another class (superclass). It promotes code reusability.",
            code: `
class Animal {
  void eat() {
    System.out.println("This animal eats food.");
  }
}

class Dog extends Animal {
  void bark() {
    System.out.println("The dog barks.");
  }
}
`
          },
          {
            title: "Encapsulation",
            url: "https://www.geeksforgeeks.org/encapsulation-in-java/",
            img: "https://www.scientecheasy.com/wp-content/uploads/2018/06/encapsulation-in-java.png",
            info: "Encapsulation is the technique of bundling data (variables) and methods that operate on the data into a single unit, typically a class, and restricting direct access to some of the object's components using access modifiers.",
            code: `
class Person {
  private String name;

  public void setName(String newName) {
    name = newName;
  }

  public String getName() {
    return name;
  }
}
`
          },
          {
            title: "Classes",
            url: "https://www.geeksforgeeks.org/classes-objects-java/",
            img: "https://cdn.educba.com/academy/wp-content/uploads/2024/03/Class-Definition-in-Java.jpg",
            info: "A class is a blueprint for creating objects in Java. It can contain fields (variables) and methods to define behavior.",
            code: `
class Car {
  String color;
  int speed;

  void drive() {
    System.out.println("The car is driving.");
  }
}
`
          },
          {
            title: "Subclasses and super classes",
            url: "https://www.tutorialspoint.com/Subclasses-Superclasses-and-Inheritance",
            img: "https://i.ytimg.com/vi/0PPKccntohM/maxresdefault.jpg",
            info: "A superclass is the parent class that shares its properties with other classes. A subclass extends the superclass and inherits its members. Subclasses can also override superclass methods.",
            code: `
class Vehicle {
  void move() {
    System.out.println("Vehicle is moving");
  }
}

class Bike extends Vehicle {
  void move() {
    System.out.println("Bike is moving fast");
  }
}
`
          },
          {
            title: "Polymorphism",
            url: "https://www.geeksforgeeks.org/polymorphism-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20250102180222562245/poly.png",
            info: "Polymorphism allows objects to take on many forms. In Java, it enables a single interface to represent different underlying forms (method overriding and overloading).",
            code: `
class Animal {
  void sound() {
    System.out.println("Animal makes a sound");
  }
}

class Cat extends Animal {
  void sound() {
    System.out.println("Meow");
  }
}
`
          },
          {
            title: "Overloading",
            url: "https://www.geeksforgeeks.org/method-overloading-in-java/",
            img: "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgw7rO5qVmumNBZhHdLlV77x3z_xrIizYn3lKwnAQpqNdf3jdG_AGjN-donNwPifJWel6erAVTKZCKU8Mt8lAfFcjDenLV4EEnj_TvYNVrpj88S1-pqYhQCCHSWqPjPvK3WuBXWPXdx1ZW9/s640/Method+Overloading.png",
            info: "Method overloading is a type of polymorphism in which multiple methods in the same class share the same name but differ in parameters (type or number).",
            code: `
class MathOperation {
  int add(int a, int b) {
    return a + b;
  }

  double add(double a, double b) {
    return a + b;
  }
}
`
          },
          {
            title: "Message communication",
            url: "https://www.geeksforgeeks.org/message-passing-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20190509121341/Message-Passing-in-Java-1024x634.jpg",
            info: "Message communication in OOP refers to the process of sending and receiving information (method calls) between objects. Objects interact by invoking each other's methods.",
            code: `
// Object-to-object communication
class A {
  void greet() {
    System.out.println("Hello from A");
  }
}

class B {
  void message(A obj) {
    obj.greet();
  }
}`
          }
        ]
      }
      ,
      {
        title: "Compiling and running a simple program",
        links: [
          {
            title: "Setting Up Your Computer",
            url: "https://www.geeksforgeeks.org/download-install-java-windows-linux-macos/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20250103151805471945/Install-Download-Java-1.png",
            info: "To set up Java on your computer:\n1. Download and install the latest JDK from the official Oracle website.\n2. Set the `JAVA_HOME` environment variable.\n3. Add the JDK `bin` folder to the system `PATH`.\n4. Open a terminal or command prompt and run `java -version` and `javac -version` to confirm the setup.",
            code: `// Terminal check
java -version
javac -version
// Sample output:
// java version "17.0.2"
// javac 17.0.2`
          },
          {
            title: "Writing a Program",
            url: "https://www.geeksforgeeks.org/java-hello-world-program/",
            img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRn42-J4Ej9jnT0sypLUBFxBybEsIi1E2i6Hg&s",
            info: "You can write Java code using any text editor like Notepad or an IDE like IntelliJ or Eclipse. Save the file with a `.java` extension and ensure the class name matches the file name.",
            code: `
public class HelloWorld {
  public static void main(String[] args) {
    System.out.println("Hello, World!");
  }
}
`
          },
          {
            title: "Compiling",
            url: "https://www.geeksforgeeks.org/compilation-execution-java-program/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/java.jpg",
            info: "Java source files (.java) must be compiled into bytecode (.class) using the `javac` compiler. Compilation checks for syntax errors and generates bytecode.",
            code: `// In terminal or command prompt:
javac HelloWorld.java

// Output:
// A file named HelloWorld.class is created (contains bytecode)`
          },
          {
            title: "Interpreting and Running the program",
            url: "https://www.oracle.com/java/technologies/compile.html",
            img: "https://miro.medium.com/v2/resize:fit:800/0*D56_ee0bcQCYrbpQ.png",
            info: "After compilation, run the bytecode file using the Java interpreter `java`. It executes the `.class` file through the JVM.",
            code: `// In terminal or command prompt:
java HelloWorld

// Output:
// Hello, World!`
          },
          {
            title: "Common Errors",
            url: "https://www.geeksforgeeks.org/types-of-errors-in-java-with-examples/",
            img: "https://www.scaler.com/topics/images/types-of-errors-in-java_thumbnail.webp",
            info: "Typical errors during compilation and execution:\n- Missing semicolon `;`\n- File name does not match class name\n- Using `javac` or `java` without correct PATH\n- Syntax errors like unmatched braces or parentheses\n- Not saving the file before compiling",
            code: `// Example error: class name mismatch
// File name: test.java
public class Hello { } 

// Error: class Hello is public, should be declared in a file named Hello.java`
          }
        ]
      }
      ,
    ],
  },
  {
    title: "UNIT 2 : Building Blocks of the Language",
    topics: [
      {
        title: "Primitive Data Types",
        links: [
          {
            title: "Integers",
            url: "https://www.geeksforgeeks.org/data-types-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20240809125618/Java-Data-Types.png",
            info: "Java provides several integer types: byte (1 byte), short (2 bytes), int (4 bytes), and long (8 bytes). These are used to store whole numbers.",
            code: `
public class IntegerExample {
  public static void main(String[] args) {
    byte a = 100;
    short b = 10000;
    int c = 100000;
    long d = 10000000000L;

    System.out.println(a + ", " + b + ", " + c + ", " + d);
  }
}
`
          },
          {
            title: "FloatingPoint type",
            url: "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html",
            img: "https://codingzap.com/wp-content/uploads/2024/08/Comparison-Table-For-Differences-Between-Double-And-Floating-Point-Numbers.webp",
            info: "Java has two floating-point types: float (32-bit) and double (64-bit). These are used to store decimal numbers.",
            code: `
public class FloatExample {
  public static void main(String[] args) {
    float pi = 3.14f;
    double gravity = 9.80665;

    System.out.println("Pi: " + pi);
    System.out.println("Gravity: " + gravity);
  }
}
`
          },
          {
            title: "Characters",
            url: "https://www.w3schools.com/java/java_data_types_characters.asp",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/lang.Charcater-class-Set-1.png",
            info: "The `char` type in Java stores a single 16-bit Unicode character. It is declared using single quotes ('').",
            code: `
public class CharExample {
  public static void main(String[] args) {
    char letter = 'A';
    char symbol = '#';
    char unicode = '\\u03A9'; // Greek capital letter Omega

    System.out.println(letter + ", " + symbol + ", " + unicode);
  }
}
`
          },
          {
            title: "Booleans",
            url: "https://www.w3schools.com/java/java_booleans.asp",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/Boolean-class-methods..jpg",
            info: "The `boolean` type has only two possible values: true and false. It is often used for decision-making and condition checking.",
            code: `
public class BooleanExample {
  public static void main(String[] args) {
    boolean isJavaFun = true;
    boolean isFishTasty = false;

    System.out.println("Is Java fun? " + isJavaFun);
    System.out.println("Is fish tasty? " + isFishTasty);
  }
}
`
          }
        ]
      }
      ,
      {
        title: "Java Essentials",
        links: [
          {
            title: "User Defined Data Type",
            url: "https://code2night.com/Blog/MyBlog/userdefined-data-types-in-java",
            img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSz2vm3R8o0XXGutOCEr1SBAp6tZ-ZSb1qyVA&s",
            info: "A user-defined data type is a type that is created by the programmer, often through class or interface. It allows the creation of complex data structures by grouping together primitive types or other objects.",
            code: `
class Person {
  String name;
  int age;
  
  Person(String name, int age) {
    this.name = name;
    this.age = age;
  }
}
`
          },
          {
            title: "Identifiers & Literals",
            url: "https://www.geeksforgeeks.org/java-identifiers/",
            img: "https://articles.geekster.in/wp-content/uploads/2024/03/image-37-1024x536-1.png",
            info: "Identifiers are names given to variables, methods, classes, etc. Literals are fixed values such as numbers (e.g., 10), characters (e.g., 'a'), or boolean values (e.g., true). Identifiers must start with a letter, underscore, or dollar sign.",
            code: `
public class IdentifierLiteralExample {
  public static void main(String[] args) {
    int number = 10;  // 10 is a literal
    String name = "Java";  // "Java" is a literal
  }
}
`
          },
          {
            title: "Declarations of constants & variables",
            url: "https://www.geeksforgeeks.org/variables-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20230405113005/Types-of-Variables-in-Java.webp",
            info: "Variables are declared with a type followed by a name. Constants are declared using the `final` keyword, meaning their value cannot be changed after initialization.",
            code: `
public class ConstantsVariablesExample {
  final double PI = 3.14159;  // constant
  int radius = 5;  // variable

  public static void main(String[] args) {
    System.out.println(PI);
  }
}
`
          },
          {
            title: "Type Conversion and Casting",
            url: "https://www.geeksforgeeks.org/java-program-to-implement-type-casting-and-type-conversion/",
            img: "https://www.scientecheasy.com/wp-content/uploads/2019/02/automatic-type-conversion-in-java.png",
            info: "Type conversion allows you to change a variable from one data type to another. Casting is used to explicitly convert a variable's type. Implicit casting happens automatically for smaller to larger types, while explicit casting is required for larger to smaller types.",
            code: `
public class TypeCastingExample {
  public static void main(String[] args) {
    int x = 10;
    double y = x;  // Implicit casting (widening)
    int z = (int) y;  // Explicit casting (narrowing)
    
    System.out.println(x + ", " + y + ", " + z);
  }
}
`
          },
          {
            title: "Scope of variables & default values of variables declared",
            url: "https://www.geeksforgeeks.org/variable-scope-in-java/",
            img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ19-jF_vr8WZ1nbcXxHkrTGuVU63TzfpRkRw&s",
            info: "The scope of a variable is the region of the program where it is accessible. Local variables have a method-level scope, whereas instance variables have a class-level scope. Variables are given default values (e.g., 0 for integers, null for objects).",
            code: `
public class VariableScopeExample {
  static int staticVar = 10;  // Class-level scope
  
  public static void main(String[] args) {
    int localVar = 5;  // Method-level scope
    System.out.println(staticVar + ", " + localVar);
  }
}
`
          },
          {
            title: "Wrapper classes",
            url: "https://www.geeksforgeeks.org/wrapper-classes-java/",
            img: "https://javagoal.com/wp-content/uploads/2020/09/28.png",
            info: "Wrapper classes in Java provide object representations for primitive data types. Each primitive type has a corresponding wrapper class, such as Integer for int, Double for double, and Character for char.",
            code: `
public class WrapperClassExample {
  public static void main(String[] args) {
    Integer x = 10;  // Autoboxing
    int y = x;  // Unboxing
    
    System.out.println(x + ", " + y);
  }
}
`
          },
          {
            title: "Comment Syntax",
            url: "https://www.geeksforgeeks.org/comments-in-java/",
            img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRvNyIGLBpphLr1efkwWOs70Qnf8XJNaSXc3g&s",
            info: "Comments are used to explain code and make it more readable. Single-line comments start with `//`, and multi-line comments are enclosed with `/*` and `*/`. Documentation comments start with `/**` and are used for Javadoc generation.",
            code: `
public class CommentExample {
  // This is a single-line comment
  public static void main(String[] args) {
    /* This is
       a multi-line comment */
    System.out.println("Hello, World!");
  }
}
`
          },
          {
            title: "Garbage Collection",
            url: "https://www.geeksforgeeks.org/garbage-collection-java/",
            img: "https://media.geeksforgeeks.org/wp-content/cdn-uploads/garbagecollection.jpeg",
            info: "Garbage collection is the process by which Java automatically frees memory by deleting objects that are no longer reachable or used by the program. This helps to manage memory efficiently.",
            code: `
public class GarbageCollectionExample {
  public static void main(String[] args) {
    // Objects will be eligible for GC after going out of scope
    String str = new String("Hello, Java!");
    str = null;  // Object is eligible for garbage collection
  }
}
`
          },
          {
            title: "Arrays of Primitive Data Types",
            url: "https://www.geeksforgeeks.org/arrays-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/Arrays1.png",
            info: "Arrays in Java store multiple values of the same data type. The elements of an array are indexed starting from 0. Arrays of primitive data types like int, double, or char are commonly used to store large datasets.",
            code: `
public class ArrayExample {
  public static void main(String[] args) {
    int[] numbers = {1, 2, 3, 4, 5};
    System.out.println(numbers[0]);  // Output: 1
  }
}
`
          },
          {
            title: "Types of Arrays",
            url: "https://www.geeksforgeeks.org/types-of-arrays/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20240731124259/Types-of-Arrays.webp",
            info: "In Java, arrays can be of two types: single-dimensional arrays and multi-dimensional arrays. A multi-dimensional array is an array of arrays.",
            code: `
public class MultiDimensionalArrayExample {
  public static void main(String[] args) {
    int[][] matrix = {
      {1, 2, 3},
      {4, 5, 6},
      {7, 8, 9}
    };
    System.out.println(matrix[1][1]);  // Output: 5
  }
}
`
          }
        ]
      }
      ,
      {
        title: "String",
        links: [
          {
            title: "Creation",
            url: "https://www.geeksforgeeks.org/different-ways-create-objects-java/",
            img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSPb9zuXy_GwQqu5rMvbOiKdGAqBFRVEulodQ&s",
            info: "In Java, strings are created using the `String` class. You can create a string by directly assigning a value or by using the `new` keyword.",
            code: `
public class StringCreationExample {
  public static void main(String[] args) {
    String str1 = "Hello, World!";  // Using string literal
    String str2 = new String("Hello!");  // Using new keyword
    
    System.out.println(str1);
    System.out.println(str2);
  }
}
`
          },
          {
            title: "Concatenation and conversion of a string",
            url: "https://www.geeksforgeeks.org/java-string-concat-examples/",
            img: "https://i.ytimg.com/vi/xD7scpUWcOg/hq720.jpg?sqp=-oaymwEhCK4FEIIDSFryq4qpAxMIARUAAAAAGAElAADIQj0AgKJD&rs=AOn4CLAcTI6QzziIbE2fgmFtH_SBDpxjXQ",
            info: "String concatenation combines two or more strings using the `+` operator. You can also convert other data types into strings using the `String.valueOf()` method.",
            code: `
public class StringConcatenationExample {
  public static void main(String[] args) {
    String str1 = "Hello";
    String str2 = " World!";
    String result = str1 + str2;  // Concatenation
    
    int num = 100;
    String numStr = String.valueOf(num);  // Converting integer to string
    
    System.out.println(result);
    System.out.println(numStr);
  }
}
`
          },
          {
            title: "Changing case of string",
            url: "https://www.geeksforgeeks.org/convert-alternate-characters-string-upper-case/",
            img: "https://www.homeandlearn.co.uk/java/images/strings/change_case_upper.gif",
            info: "You can change the case of a string in Java using the `toUpperCase()` and `toLowerCase()` methods.",
            code: `
public class StringCaseExample {
  public static void main(String[] args) {
    String str = "Hello, World!";
    String upperCaseStr = str.toUpperCase();  // Converting to uppercase
    String lowerCaseStr = str.toLowerCase();  // Converting to lowercase
    
    System.out.println(upperCaseStr);
    System.out.println(lowerCaseStr);
  }
}
`
          },
          {
            title: "Character extraction",
            url: "https://www.geeksforgeeks.org/java-program-to-get-a-character-from-a-string/",
            img: "https://i.ytimg.com/vi/B0N-Syu0n9k/maxresdefault.jpg",
            info: "You can extract individual characters from a string using the `charAt()` method, which returns the character at a specified index.",
            code: `
public class StringCharacterExtractionExample {
  public static void main(String[] args) {
    String str = "Hello, World!";
    char ch = str.charAt(4);  // Extracting the character at index 4
    
    System.out.println(ch);  // Output: o
  }
}
`
          },
          {
            title: "String Comparison",
            url: "https://www.geeksforgeeks.org/compare-two-strings-in-java/",
            img: "https://www.javastring.net/wp-content/uploads/java-string-equality-operator.png",
            info: "Strings can be compared using `equals()` for content comparison or `==` for reference comparison. The `equalsIgnoreCase()` method compares strings while ignoring case differences.",
            code: `
public class StringComparisonExample {
  public static void main(String[] args) {
    String str1 = "Java";
    String str2 = "java";
    
    boolean result1 = str1.equals(str2);  // Cajava-sensitive comparison
    boolean result2 = str1.equalsIgnoreCase(str2);  // Cajava-insensitive comparison
    
    System.out.println(result1);  // Output: false
    System.out.println(result2);  // Output: true
  }
}
`
          },
          {
            title: "String Buffer",
            url: "https://www.geeksforgeeks.org/stringbuffer-class-in-java/",
            img: "https://www.scientecheasy.com/wp-content/uploads/2020/05/java-stringbuffer-class.png",
            info: "StringBuffer is used to create mutable (modifiable) strings. It allows you to modify strings without creating new objects. Common methods include `append()`, `insert()`, `reverse()`, and `delete()`.",
            code: `
public class StringBufferExample {
  public static void main(String[] args) {
    StringBuffer sb = new StringBuffer("Hello");
    sb.append(" World!");  // Appending to the string
    sb.reverse();  // Reversing the string
    
    System.out.println(sb);  // Output: !dlroW olleH
  }
}
`
          }
        ]
      }
      ,
      {
        title: "Different Operators",
        links: [
          {
            title: "Arithmetic",
            url: "https://www.geeksforgeeks.org/java-arithmetic-operators-with-examples/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20211203114825/arithmeticoperators.png",
            info: "Arithmetic operators are used to perform basic arithmetic operations like addition, subtraction, multiplication, division, and modulus.",
            code: `
public class ArithmeticOperatorExample {
  public static void main(String[] args) {
    int a = 10, b = 5;
    
    System.out.println("Addition: " + (a + b));  // Output: 15
    System.out.println("Subtraction: " + (a - b));  // Output: 5
    System.out.println("Multiplication: " + (a * b));  // Output: 50
    System.out.println("Division: " + (a / b));  // Output: 2
    System.out.println("Modulus: " + (a % b));  // Output: 0
  }
}
`
          },
          {
            title: "Bitwise",
            url: "https://www.geeksforgeeks.org/bitwise-operators-in-java/",
            img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQggQmJdDbNlCnVYcwUM2Dl8dyN-Dq2EC1gIA&s",
            info: "Bitwise operators are used to perform bit-level operations on binary values. They include `AND`, `OR`, `XOR`, `NOT`, and shift operators.",
            code: `
public class BitwiseOperatorExample {
  public static void main(String[] args) {
    int a = 5, b = 3;  // 5 = 0101, 3 = 0011
    
    System.out.println("AND: " + (a & b));  // Output: 1 (0101 & 0011 = 0001)
    System.out.println("OR: " + (a | b));  // Output: 7 (0101 | 0011 = 0111)
    System.out.println("XOR: " + (a ^ b));  // Output: 6 (0101 ^ 0011 = 0110)
    System.out.println("NOT: " + (~a));  // Output: -6 (~0101 = 1010)
    System.out.println("Left Shift: " + (a << 1));  // Output: 10 (0101 << 1 = 1010)
    System.out.println("Right Shift: " + (a >> 1));  // Output: 2 (0101 >> 1 = 0010)
  }
}
`
          },
          {
            title: "Rational",
            url: "https://www.geeksforgeeks.org/java-relational-operators-with-examples/",
            img: "https://beginnersbook.com/wp-content/uploads/2022/09/Relational_Operators_Java.jpg",
            info: "Rational operators (also known as relational operators) are used to compare two values. They include `==`, `!=`, `>`, `<`, `>=`, and `<=`.",
            code: `
public class RationalOperatorExample {
  public static void main(String[] args) {
    int a = 10, b = 5;
    
    System.out.println("Equal: " + (a == b));  // Output: false
    System.out.println("Not Equal: " + (a != b));  // Output: true
    System.out.println("Greater Than: " + (a > b));  // Output: true
    System.out.println("Less Than: " + (a < b));  // Output: false
    System.out.println("Greater Than or Equal: " + (a >= b));  // Output: true
    System.out.println("Less Than or Equal: " + (a <= b));  // Output: false
  }
}
`
          },
          {
            title: "Logical",
            url: "https://www.geeksforgeeks.org/java-logical-operators-with-examples/",
            img: "https://www.examtray.com/sites/default/files/styles/wordpress_800x460/public/2019-06/java-boolean-logical-operators-priotiry-table.jpg?itok=jcXIvptd",
            info: "Logical operators are used to combine multiple boolean expressions. They include `&&` (AND), `||` (OR), and `!` (NOT).",
            code: `
public class LogicalOperatorExample {
  public static void main(String[] args) {
    boolean a = true, b = false;
    
    System.out.println("AND: " + (a && b));  // Output: false
    System.out.println("OR: " + (a || b));  // Output: true
    System.out.println("NOT a: " + !a);  // Output: false
  }
}
`
          },
          {
            title: "Assignment",
            url: "https://www.geeksforgeeks.org/java-assignment-operator-with-examples/",
            img: "https://beginnersbook.com/wp-content/uploads/2022/09/Assignment_Operators_List.jpg",
            info: "Assignment operators are used to assign values to variables. The most common is `=`, but there are also shorthand operators like `+=`, `-=`, `*=`, `/=`, etc.",
            code: `
public class AssignmentOperatorExample {
  public static void main(String[] args) {
    int a = 10;
    
    a += 5;  // Equivalent to a = a + 5
    System.out.println("a += 5: " + a);  // Output: 15
    
    a *= 2;  // Equivalent to a = a * 2
    System.out.println("a *= 2: " + a);  // Output: 30
  }
}
`
          },
          {
            title: "Conditional/Ternary",
            url: "https://www.geeksforgeeks.org/java-ternary-operator/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20191122171059/Conditional-or-Ternary-Operator-__-in-Java.jpg",
            info: "Conditional (ternary) operators are used for decision-making in a concise manner. The syntax is `condition ? value_if_true : value_if_false`.",
            code: `
public class ConditionalOperatorExample {
  public static void main(String[] args) {
    int a = 10, b = 20;
    
    int max = (a > b) ? a : b;  // Conditional operator
    System.out.println("Max: " + max);  // Output: 20
  }
}
//
public class TernaryOperatorExample {
  public static void main(String[] args) {
    int a = 10, b = 20;
    
    String result = (a > b) ? "a is greater" : "b is greater";
    System.out.println(result);  // Output: b is greater
  }
}
`
          },
          {
            title: "Increment and Decrement",
            url: "https://www.geeksforgeeks.org/interesting-facts-increment-decrement-operators-java/",
            img: "https://files.codingninjas.in/article_images/increment-and-decrement-operators-in-java-0-1731139503.webp",
            info: "Increment (`++`) and decrement (`--`) operators are used to increase or decrease a variable's value by 1, either before or after the expression.",
            code: `
public class IncrementDecrementExample {
  public static void main(String[] args) {
    int a = 10;
    
    System.out.println("Post-Increment: " + a++);  // Output: 10
    System.out.println("After Post-Increment: " + a);  // Output: 11
    
    System.out.println("Pre-Increment: " + ++a);  // Output: 12
    System.out.println("After Pre-Increment: " + a);  // Output: 12
  }
}
`
          },
          {
            title: "Mathematical Functions",
            url: "https://www.w3schools.com/java/java_ref_math.asp",
            img: "https://slideplayer.com/slide/14840106/90/images/2/Java+s+Math+class+Method+name+Description+Math.abs%28value%29.jpg",
            info: "Java provides various mathematical functions through the `Math` class, including methods for square root, power, trigonometric functions, and more.",
            code: `
public class MathFunctionsExample {
  public static void main(String[] args) {
    double a = 9, b = 2;
    
    System.out.println("Square Root: " + Math.sqrt(a));  // Output: 3.0
    System.out.println("Power: " + Math.pow(a, b));  // Output: 81.0
    System.out.println("Random Number: " + Math.random());  // Output: Random value between 0.0 and 1.0
  }
}
`
          }
        ]
      }
      ,
      {
        title: "Decision & Control Statements",
        links: [
          {
            title: "Selection Statement (if, if...else, switch)",
            url: "https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/",
            img: "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMeXGF7Kg1TaardiDtgIB4kIn3Kw7DW-sNn3W4wm2Xn8f2wSlQT4INcleAtPwX21YVZsL-3SZ9W8sB-k0R_gEih722wG7Z5J4SCOD-dy8wn-TAd_Ugf0o7VyAoNgvN1ijErPmRuzi4/w1200-h675-p-k-no-nu/Blue+Teaching+Math+Education+Presentation+%25284%2529.png",
            info: "Selection statements allow a program to choose different paths of execution based on conditions. Common selection statements are `if`, `if...else`, and `switch`.",
            code: `
public class SelectionStatementExample {
  public static void main(String[] args) {
    int number = 5;

    // if statement
    if (number > 0) {
      System.out.println("Positive number");
    }

    // if...else statement
    if (number % 2 == 0) {
      System.out.println("Even");
    } else {
      System.out.println("Odd");
    }

    // switch statement
    int day = 3;
    switch (day) {
      case 1: System.out.println("Monday"); break;
      case 2: System.out.println("Tuesday"); break;
      case 3: System.out.println("Wednesday"); break;
      default: System.out.println("Invalid day");
    }
  }
}
`
          },
          {
            title: "Loops (while, do-while, for)",
            url: "https://www.geeksforgeeks.org/loops-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20250115145929882869/Forloop.webp",
            info: "Loops are used to repeat a block of code multiple times. Common loop types include `while`, `do-while`, and `for`.",
            code: `
public class LoopExample {
  public static void main(String[] args) {
    int i = 1;

    // while loop
    while (i <= 3) {
      System.out.println("While loop iteration: " + i);
      i++;
    }

    // do-while loop
    int j = 1;
    do {
      System.out.println("Do-While loop iteration: " + j);
      j++;
    } while (j <= 3);

    // for loop
    for (int k = 1; k <= 3; k++) {
      System.out.println("For loop iteration: " + k);
    }
  }
}
`
          },
          {
            title: "Jump statements (break, continue, return & exit)",
            url: "https://www.geeksforgeeks.org/jump-statements-in-java/",
            img: "https://codingzap.com/wp-content/uploads/2024/02/jump-statement-in-Java-flowchart.webp",
            info: "Jump statements alter the flow of control by exiting loops or methods early. Common jump statements are `break`, `continue`, `return`, and `System.exit()`.",
            code: `
public class JumpStatementExample {
  public static void main(String[] args) {
    // break
    for (int i = 1; i <= 5; i++) {
      if (i == 3) break;
      System.out.println("Break Example: " + i);
    }

    // continue
    for (int i = 1; i <= 5; i++) {
      if (i == 3) continue;
      System.out.println("Continue Example: " + i);
    }

    // return
    System.out.println("Before return");
    if (true) return;
    // This line will never be printed
    // System.out.println("After return");

    // System.exit
    // System.exit(0); // Terminates the program immediately
  }
}
`
          }
        ]
      }
      ,
    ],
  },
  {
    title: "UNIT 3 : Object Oriented Programming Concepts",
    topics: [
      {
        title: "Main OOPS",
        links: [
          {
            title: "Defining classes",
            url: "https://www.geeksforgeeks.org/classes-objects-java/",
            img: "https://cdn.educba.com/academy/wp-content/uploads/2024/03/Class-Definition-in-Java.jpg",
            info: "A class in Java defines a blueprint for objects. It can include fields, methods, constructors, etc.",
            code: `
class Car {
  // Fields
  String color;
  int speed;

  // Method
  void drive() {
    System.out.println("Car is driving.");
  }
}
`
          },
          {
            title: "Fields and methods",
            url: "https://www.geeksforgeeks.org/methods-in-java/",
            img: "https://www.w3resource.com/w3r_images/java-class-image.png",
            info: "Fields store data, while methods define behavior. Both belong to a class.",
            code: `
class Dog {
  // Field
  String name;

  // Method
  void bark() {
    System.out.println(name + " says Woof!");
  }
}
`
          },
          {
            title: "Creating objects",
            url: "https://www.w3schools.com/java/java_classes.asp",
            img: "https://crunchify.com/wp-content/uploads/2013/07/In-Java-6-Different-way-to-create-Objects-Crunchify-Tips.png",
            info: "Objects are instances of a class, created using the `new` keyword.",
            code: `
public class Main {
  public static void main(String[] args) {
    Dog d = new Dog();  // Object created
    d.name = "Buddy";
    d.bark();           // Method called
  }
}
`
          },
          {
            title: "Accessing rules",
            url: "https://www.geeksforgeeks.org/access-modifiers-java/",
            img: "https://lh4.googleusercontent.com/proxy/qknRJ6wWSsE4DFzjIHVF-xBVZ3rtVz5FrAFD-d3QV10RylU-FA8SM4IGUyaMoZRGVh8vDkCZPCYCR6HdI0EqJwm1okKQZEfR-5j2LC3MuoKfRMw67QuOBAD60iY",
            info: "Java uses access modifiers (private, public, protected, default) to control visibility of class members.",
            code: `
class Person {
  public String name;
  private int age;

  public void setAge(int a) {
    age = a;
  }

  public int getAge() {
    return age;
  }
}
`
          },
          {
            title: "This keyword",
            url: "https://www.geeksforgeeks.org/this-reference-in-java/",
            img: "https://javagoal.com/wp-content/uploads/2020/05/40.png",
            info: "`this` is a reference to the current object. It helps resolve naming conflicts between instance variables and parameters.",
            code: `
class Student {
  String name;

  Student(String name) {
    this.name = name; // Refers to the current object's name
  }

  void display() {
    System.out.println("Name: " + this.name);
  }
}
`
          },
          {
            title: "Static keyword",
            url: "https://www.geeksforgeeks.org/static-keyword-java/",
            img: "https://cdn.educba.com/academy/wp-content/uploads/2019/11/Static-Keyword-in-Java.png",
            info: "`static` means the member belongs to the class, not to any object. Useful for shared variables or utility methods.",
            code: `
class MathUtil {
  static int square(int x) {
    return x * x;
  }
}

public class Main {
  public static void main(String[] args) {
    System.out.println(MathUtil.square(4)); // Calls static method
  }
}
`
          },
          {
            title: "Method overloading",
            url: "https://www.geeksforgeeks.org/method-overloading-in-java/",
            img: "https://media.licdn.com/dms/image/v2/D5612AQFCbTOnfX5Vmg/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1705375013206?e=2147483647&v=beta&t=GUFAPU8JiBNDHXXITJd73TFJwb4fgmeE4DPW6UiiY9A",
            info: "Method overloading allows multiple methods with the same name but different parameters.",
            code: `
class Calculator {
  int add(int a, int b) {
    return a + b;
  }

  double add(double a, double b) {
    return a + b;
  }
}
`
          },
          {
            title: "Final keyword",
            url: "https://www.geeksforgeeks.org/final-keyword-in-java/",
            img: "https://www.java4coding.com/contents/java/images/java-final-keyword-1.png",
            info: "The `final` keyword can be used with variables (constant), methods (cannot override), or classes (cannot extend).",
            code: `
// final variable
final int MAX = 100;

// final method
class A {
  final void show() {
    System.out.println("This cannot be overridden.");
  }
}

// final class
final class Constants {
  public static final double PI = 3.14159;
}
`
          }
        ]
      }
      ,
      {
        title: "Constructors",
        links: [
          {
            title: "Default constructors",
            url: "https://www.geeksforgeeks.org/constructors-in-java/",
            img: "https://howtodoinjava.com/wp-content/uploads/2023/01/Java-Constructors.svg",
            info: "A default constructor is a no-argument constructor that initializes an object with default values.",
            code: `
class Bike {
  Bike() {
    System.out.println("Default constructor called.");
  }

  public static void main(String[] args) {
    Bike b = new Bike();  // Default constructor is invoked
  }
}
`
          },
          {
            title: "Parameterized constructors",
            url: "https://www.geeksforgeeks.org/constructors-in-java/",
            img: "https://howtodoinjava.com/wp-content/uploads/2023/01/Java-Constructors.svg",
            info: "Parameterized constructors accept arguments to initialize object fields during creation.",
            code: `
class Student {
  String name;
  int age;

  Student(String n, int a) {
    name = n;
    age = a;
  }

  void display() {
    System.out.println(name + " - " + age);
  }

  public static void main(String[] args) {
    Student s = new Student("Alice", 20);
    s.display();
  }
}
`
          },
          {
            title: "Passing object as a parameter",
            url: "https://www.geeksforgeeks.org/passing-and-returning-objects-in-java/",
            img: "https://i.ytimg.com/vi/vrFV77Cgb_s/maxresdefault.jpg",
            info: "An object can be passed as an argument to a constructor to initialize one object using another.",
            code: `
class Book {
  String title;

  Book(String t) {
    title = t;
  }

  Book(Book b) {
    title = b.title;  // Copying title from passed object
  }

  void show() {
    System.out.println("Book Title: " + title);
  }

  public static void main(String[] args) {
    Book b1 = new Book("Java Basics");
    Book b2 = new Book(b1);
    b2.show();
  }
}
`
          },
          {
            title: "Constructor overloading",
            url: "https://www.geeksforgeeks.org/constructor-overloading-java/",
            img: "https://www.scientecheasy.com/wp-content/uploads/2020/06/java-constructor-overloading.png",
            info: "Constructor overloading means having multiple constructors with different parameter lists in the same class.",
            code: `
class Rectangle {
  int width, height;

  Rectangle() {
    width = 10;
    height = 5;
  }

  Rectangle(int w, int h) {
    width = w;
    height = h;
  }

  void area() {
    System.out.println("Area: " + (width * height));
  }

  public static void main(String[] args) {
    Rectangle r1 = new Rectangle();
    Rectangle r2 = new Rectangle(7, 3);
    r1.area();
    r2.area();
  }
}
`
          }
        ]
      }
      ,
    ],
  },
  {
    title: "UNIT 4 : Inheritance, Packages & Interfaces",
    topics: [
      {
        title: "Inheritence",
        links: [
          {
            title: "Basics of Inheritance",
            url: "https://www.geeksforgeeks.org/inheritance-in-java/",
            img: "https://www.tutorialspoint.com/java/images/types_of_inheritance.jpg",
            info: "Inheritance allows a class (child) to inherit fields and methods from another class (parent).",
            code: `
class Animal {
  void sound() {
    System.out.println("Animal makes sound");
  }
}

class Dog extends Animal {
  void bark() {
    System.out.println("Dog barks");
  }

  public static void main(String[] args) {
    Dog d = new Dog();
    d.sound();  // inherited
    d.bark();   // own
  }
}
`
          },
          {
            title: "Types of inheritance #1 (single)",
            url: "https://www.scholarhat.com/tutorial/java/single-inheritance-in-java",
            img: "https://dotnettrickscloud.blob.core.windows.net/img/java/2820230210145743.webp",
            info: "Single inheritance involves one child class deriving from one parent class.",
            code: `
class A {
  void msg() {
    System.out.println("Message from A");
  }
}

class B extends A {
  void display() {
    System.out.println("Single inheritance in action");
  }

  public static void main(String[] args) {
    B obj = new B();
    obj.msg();
    obj.display();
  }
}
`
          },
          {
            title: "Types of inheritance #2 (multiple)",
            url: "https://www.geeksforgeeks.org/java-and-multiple-inheritance/",
            img: "https://media.licdn.com/dms/image/v2/D5612AQFdWlzmCeWhYg/article-cover_image-shrink_720_1280/B56ZUiN8bCGoAI-/0/1740035836329?e=2147483647&v=beta&t=OCk9JDYLTe8AGRTHkHYJeSAG-L7Ih_rMnh8zCOP1IZ0",
            info: "Java does not support multiple inheritance with classes due to ambiguity. It is supported using interfaces.",
            code: `
interface A {
  void show();
}

interface B {
  void display();
}

class C implements A, B {
  public void show() {
    System.out.println("Interface A method");
  }
  public void display() {
    System.out.println("Interface B method");
  }

  public static void main(String[] args) {
    C obj = new C();
    obj.show();
    obj.display();
  }
}
`
          },
          {
            title: "Types of inheritance #3 (multilevel)",
            url: "https://www.tutorialspoint.com/Multilevel-inheritance-in-Java",
            img: "https://media.licdn.com/dms/image/v2/D5612AQFdWlzmCeWhYg/article-cover_image-shrink_720_1280/B56ZUiN8bCGoAI-/0/1740035836329?e=2147483647&v=beta&t=OCk9JDYLTe8AGRTHkHYJeSAG-L7Ih_rMnh8zCOP1IZ0",
            info: "In multilevel inheritance, a class is derived from a derived class.",
            code: `
class A {
  void msgA() {
    System.out.println("Message from A");
  }
}

class B extends A {
  void msgB() {
    System.out.println("Message from B");
  }
}

class C extends B {
  void msgC() {
    System.out.println("Message from C");
  }

  public static void main(String[] args) {
    C obj = new C();
    obj.msgA();
    obj.msgB();
    obj.msgC();
  }
}
`
          },
          {
            title: "Types of inheritance #4 (hierarchical)",
            url: "https://www.scaler.com/topics/hierarchical-inheritance-in-java/",
            img: "https://media.licdn.com/dms/image/v2/D5612AQFdWlzmCeWhYg/article-cover_image-shrink_720_1280/B56ZUiN8bCGoAI-/0/1740035836329?e=2147483647&v=beta&t=OCk9JDYLTe8AGRTHkHYJeSAG-L7Ih_rMnh8zCOP1IZ0",
            info: "Hierarchical inheritance is when multiple classes inherit from a single parent class.",
            code: `
class Animal {
  void eat() {
    System.out.println("Eating...");
  }
}

class Dog extends Animal {
  void bark() {
    System.out.println("Barking...");
  }
}

class Cat extends Animal {
  void meow() {
    System.out.println("Meowing...");
  }

  public static void main(String[] args) {
    Dog d = new Dog();
    d.eat();
    d.bark();

    Cat c = new Cat();
    c.eat();
    c.meow();
  }
}
`
          },
          {
            title: "Types of inheritance #5 (hybrid inheritance)",
            url: "https://www.scholarhat.com/tutorial/java/hybrid-inheritance-in-java",
            img: "https://media.licdn.com/dms/image/v2/D5612AQFdWlzmCeWhYg/article-cover_image-shrink_720_1280/B56ZUiN8bCGoAI-/0/1740035836329?e=2147483647&v=beta&t=OCk9JDYLTe8AGRTHkHYJeSAG-L7Ih_rMnh8zCOP1IZ0",
            info: "Hybrid inheritance is a mix of two or more types of inheritance. It is implemented using interfaces in Java.",
            code: `
interface A {
  void msgA();
}

interface B {
  void msgB();
}

class C {
  void msgC() {
    System.out.println("Message from class C");
  }
}

class D extends C implements A, B {
  public void msgA() {
    System.out.println("Message from interface A");
  }

  public void msgB() {
    System.out.println("Message from interface B");
  }

  public static void main(String[] args) {
    D obj = new D();
    obj.msgA();
    obj.msgB();
    obj.msgC();
  }
}
`
          },
          {
            title: "Concepts of method overriding",
            url: "https://www.geeksforgeeks.org/overriding-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20230515230306/Overriding-in-Java-3-768.webp",
            info: "Method overriding means redefining a superclass method in a subclass with the same signature.",
            code: `
class Animal {
  void sound() {
    System.out.println("Animal makes a sound");
  }
}

class Dog extends Animal {
  @Override
  void sound() {
    System.out.println("Dog barks");
  }

  public static void main(String[] args) {
    Animal a = new Dog();
    a.sound();  // Calls overridden method
  }
}
`
          },
          {
            title: "Extending class",
            url: "https://www.w3schools.com/java/ref_keyword_extends.asp",
            img: "https://scaler.com/topics/images/syntax-of-extends-keyword-in-java.webp",
            info: "The 'extends' keyword is used to inherit the properties of one class into another.",
            code: `
class Vehicle {
  void run() {
    System.out.println("Running...");
  }
}

class Bike extends Vehicle {
  public static void main(String[] args) {
    Bike b = new Bike();
    b.run();  // Inherited method
  }
}
`
          },
          {
            title: "Super class",
            url: "https://www.geeksforgeeks.org/super-keyword/",
            img: "https://people.scs.carleton.ca/~lalonde/105WebPage/Notes/105_9b.jpg",
            info: "The superclass is the class whose features are inherited by another class.",
            code: `
class Person {
  void details() {
    System.out.println("Person details");
  }
}

class Student extends Person {
  public static void main(String[] args) {
    Student s = new Student();
    s.details();  // from superclass
  }
}
`
          },
          {
            title: "Subclass",
            url: "https://www.geeksforgeeks.org/java-inner-class-vs-sub-class/",
            img: "https://www.scaler.com/topics/media/superclass-and-subclass-in-java-inheritance-concept.webp",
            info: "The subclass is the class that inherits from another class.",
            code: `
class Vehicle {
  void run() {
    System.out.println("Vehicle is running");
  }
}

class Car extends Vehicle {
  void drive() {
    System.out.println("Car is driving");
  }

  public static void main(String[] args) {
    Car c = new Car();
    c.run();    // inherited
    c.drive();  // own
  }
}
`
          },
          {
            title: "Dynamic method dispatch & Object class",
            url: "https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/",
            img: "https://www.scaler.com/topics/images/upcasting-in%20java.webp",
            info: "Dynamic method dispatch allows a superclass reference to call overridden methods at runtime. All classes inherit from Object class.",
            code: `
class Animal {
  void makeSound() {
    System.out.println("Animal sound");
  }
}

class Cat extends Animal {
  void makeSound() {
    System.out.println("Meow");
  }
}

public class Test {
  public static void main(String[] args) {
    Animal a = new Cat();  // Upcasting
    a.makeSound();         // Runtime polymorphism

    System.out.println(a.toString());  // Object class method
  }
}
`
          }
        ]
      }
      ,
      {
        title: "Package",
        links: [
          {
            title: "Creating package",
            url: "https://www.geeksforgeeks.org/how-to-create-a-package-in-java/",
            img: "https://miro.medium.com/v2/resize:fit:600/0*A-YeRmDLg7qYw9ih.jpg",
            info: "A package is a namespace that organizes a set of related classes and interfaces. You can create one using the `package` keyword.",
            code: `
// Save this as MyClass.java inside a folder named 'mypack'
package mypack;

public class MyClass {
  public void showMessage() {
    System.out.println("Inside mypack.MyClass");
  }
}
`
          },
          {
            title: "Importing package",
            url: "https://www.geeksforgeeks.org/packages-in-java/",
            img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQkRvqQKfR6IL4OSr3bwmnbVu51DcEMiNbu2A&s",
            info: "To use classes from another package, you need to import the package using the `import` keyword.",
            code: `
// Save this in another file
import mypack.MyClass;

public class Test {
  public static void main(String[] args) {
    MyClass obj = new MyClass();
    obj.showMessage();
  }
}
`
          },
          {
            title: "Access rules for packages",
            url: "https://www.geeksforgeeks.org/public-vs-package-access-modifiers-in-java/",
            img: "https://i.sstatic.net/E5c6l.png",
            info: "Access modifiers determine whether classes or class members can be accessed from different packages:\n- `public`: accessible everywhere\n- `protected`: accessible in subclass (even in other packages)\n- default: accessible only within the same package\n- `private`: accessible only within the class",
            code: `
package pack1;

public class A {
  public int x = 10;
  protected int y = 20;
  int z = 30;          // default
  private int w = 40;  // private
}

// Accessing from another package
package pack2;
import pack1.A;

public class B extends A {
  public static void main(String[] args) {
    A obj = new A();
    System.out.println(obj.x); // public - allowed
    // System.out.println(obj.y); // protected - error (not subclass in same package)
    // System.out.println(obj.z); // default - error
    // System.out.println(obj.w); // private - error
  }
}
`
          },
          {
            title: "Class hiding rules in a package",
            url: "https://www.baeldung.com/java-hidden-classes",
            img: "https://www.scientecheasy.com/wp-content/uploads/2019/05/method-hiding-in-java.png",
            info: "If two classes have the same name in different packages, only one can be directly imported. Otherwise, you must use fully qualified names to avoid ambiguity.",
            code: `
// pack1/Student.java
package pack1;
public class Student {
  public void show() {
    System.out.println("Student from pack1");
  }
}

// pack2/Student.java
package pack2;
public class Student {
  public void show() {
    System.out.println("Student from pack2");
  }
}

// Test.java
import pack1.Student; // importing only one

public class Test {
  public static void main(String[] args) {
    Student s1 = new Student();        // from pack1
    pack2.Student s2 = new pack2.Student(); // fully qualified for pack2
    s1.show();
    s2.show();
  }
}
`
          }
        ]
      }
      ,
      {
        title: "Interfaces",
        links: [
          {
            title: "Defining interface",
            url: "https://www.geeksforgeeks.org/interfaces-in-java/",
            img: "https://www.scientecheasy.com/wp-content/uploads/2019/05/java-interface.png",
            info: "An interface in Java is a reference type that can contain abstract methods, default methods, static methods, and constants. Interfaces define a contract that implementing classes must follow.",
            code: `
interface Animal {
  void sound(); // abstract method
}
`
          },
          {
            title: "Inheritance on interfaces",
            url: "https://www.geeksforgeeks.org/interfaces-and-inheritance-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/cdn-uploads/interfaceee.png",
            info: "Interfaces can extend other interfaces using the `extends` keyword. A child interface inherits all methods from its parent interfaces.",
            code: `
interface A {
  void methodA();
}

interface B extends A {
  void methodB();
}

class MyClass implements B {
  public void methodA() {
    System.out.println("methodA");
  }
  public void methodB() {
    System.out.println("methodB");
  }
}
`
          },
          {
            title: "Implementing interface",
            url: "https://www.w3schools.com/java/ref_keyword_implements.asp",
            img: "https://www.besanttechnologies.com/wp-content/uploads/2019/05/Java-Interface-Features.jpg",
            info: "A class uses the `implements` keyword to provide concrete definitions for all the methods declared in an interface.",
            code: `
interface Drawable {
  void draw();
}

class Circle implements Drawable {
  public void draw() {
    System.out.println("Drawing Circle");
  }

  public static void main(String[] args) {
    Drawable obj = new Circle();
    obj.draw();
  }
}
`
          },
          {
            title: "Multiple inheritance using interface",
            url: "https://www.geeksforgeeks.org/how-to-implement-multiple-inheritance-by-using-interfaces-in-java/",
            img: "https://miro.medium.com/v2/resize:fit:998/1*lYtjDUVI6n8z77qSgcOW8A.png",
            info: "Java supports multiple inheritance of type using interfaces. A class can implement multiple interfaces, resolving the diamond problem as only method signatures are inherited.",
            code: `
interface Printable {
  void print();
}

interface Showable {
  void show();
}

class A implements Printable, Showable {
  public void print() {
    System.out.println("Print method");
  }
  public void show() {
    System.out.println("Show method");
  }

  public static void main(String[] args) {
    A obj = new A();
    obj.print();
    obj.show();
  }
}
`
          }
        ]
      }
      ,
    ],
  },
  {
    title: "UNIT 5 : Exception Handling & Multithreaded",
    topics: [
      {
        title: "Exception Handling",
        links: [
          {
            title: "Types of errors",
            url: "https://www.geeksforgeeks.org/types-of-errors-in-java-with-examples/",
            img: "https://files.codingninjas.in/article_images/types-of-error-in-java-1-1679241275.webp",
            info: "Errors in Java are mainly categorized into syntax errors, runtime errors (exceptions), and logical errors.",
            code: `
// Example of syntax error (missing semicolon)
// int x = 10

// Runtime error (division by zero)
int a = 10, b = 0;
System.out.println(a / b); // Throws ArithmeticException
`
          },
          {
            title: "Exceptions",
            url: "https://www.geeksforgeeks.org/exceptions-in-java/",
            img: "https://miro.medium.com/v2/resize:fit:1400/1*_jXNZuPLKMTQ5IKjBzb8jA.png",
            info: "Exceptions are runtime problems that disrupt the normal flow of execution. Java provides a powerful mechanism to handle them.",
            code: `
// Example: ArrayIndexOutOfBoundsException
int[] arr = {1, 2, 3};
System.out.println(arr[5]); // Throws exception
`
          },
          {
            title: "Try catch statement",
            url: "https://www.geeksforgeeks.org/try-catch-throw-and-throws-in-java/",
            img: "https://www.scientecheasy.com/wp-content/uploads/2020/02/try-catch-block.png",
            info: "The try-catch block is used to handle exceptions and prevent program termination.",
            code: `
try {
  int data = 50 / 0;
} catch (ArithmeticException e) {
  System.out.println("Cannot divide by zero");
}
`
          },
          {
            title: "Multiple catch blocks",
            url: "https://www.geeksforgeeks.org/multicatch-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20211207120445/JavaMultipleCatchBlock-660x343.png",
            info: "Java allows multiple catch blocks to handle different types of exceptions separately.",
            code: `
try {
  int[] arr = new int[5];
  arr[5] = 10 / 0;
} catch (ArithmeticException e) {
  System.out.println("Arithmetic Exception");
} catch (ArrayIndexOutOfBoundsException e) {
  System.out.println("Array Index Out Of Bounds");
}
`
          },
          {
            title: "Throw and throws keywords",
            url: "https://www.geeksforgeeks.org/throw-throws-java/",
            img: "https://i.ytimg.com/vi/uuGVSKybHO4/maxresdefault.jpg",
            info: "`throw` is used to explicitly throw an exception, whereas `throws` is used to declare exceptions.",
            code: `
// throw keyword
throw new ArithmeticException("Demo");

// throws keyword
void checkAge(int age) throws ArithmeticException {
  if (age < 18)
    throw new ArithmeticException("Not eligible");
}
`
          },
          {
            title: "Finally clause",
            url: "https://www.geeksforgeeks.org/java-program-to-use-finally-block-for-catching-exceptions/",
            img: "https://articles.geekster.in/wp-content/uploads/2024/05/Finally-Block.png",
            info: "The `finally` block always executes regardless of whether an exception is thrown or not.",
            code: `
try {
  int data = 25 / 5;
} catch (Exception e) {
  System.out.println("Exception occurred");
} finally {
  System.out.println("Finally block executed");
}
`
          },
          {
            title: "Uses of exceptions",
            url: "https://www.geeksforgeeks.org/exceptions-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20240730174225/Exceptions-in-Java-1-768.webp",
            info: "Exception handling improves program reliability and readability by managing errors gracefully.",
            code: `
// Without exception handling, program crashes
// With try-catch, we recover from runtime exceptions
try {
  String s = null;
  System.out.println(s.length());
} catch (NullPointerException e) {
  System.out.println("Handled NullPointerException");
}
`
          },
          {
            title: "User defined exceptions",
            url: "https://www.geeksforgeeks.org/user-defined-custom-exception-in-java/",
            img: "https://linuxhint.com/wp-content/uploads/2022/09/word-image-220977-1-1.png",
            info: "Java allows you to define your own exceptions by extending the Exception class.",
            code: `
class MyException extends Exception {
  MyException(String msg) {
    super(msg);
  }
}

class Test {
  public static void main(String[] args) throws MyException {
    throw new MyException("Custom Exception Thrown");
  }
}
`
          }
        ]
      }
      ,
      {
        title: "Multithreaded",
        links: [
          {
            title: "Creating thread",
            url: "https://www.tutorialspoint.com/java/java_create_thread.htm",
            img: "https://www.scientecheasy.com/wp-content/uploads/2020/06/creating-threads-in-java.png",
            info: "A thread in Java represents a path of execution. Threads can be created by extending the Thread class or implementing Runnable.",
            code: `
// Method 1: Extending Thread
class MyThread extends Thread {
  public void run() {
    System.out.println("Thread is running...");
  }
}
MyThread t1 = new MyThread();
t1.start();
`
          },
          {
            title: "Extending Thread class",
            url: "https://www.geeksforgeeks.org/multithreading-in-java/",
            img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRqOBpS-TSMX7MpD9cHahD2131SyzfGXyULKQ&s",
            info: "You can create a thread by extending the Thread class and overriding its `run()` method.",
            code: `
class MyThread extends Thread {
  public void run() {
    for (int i = 1; i <= 5; i++) {
      System.out.println("Extending Thread: " + i);
    }
  }
}

public class Main {
  public static void main(String[] args) {
    MyThread t = new MyThread();
    t.start();
  }
}
`
          },
          {
            title: "Implementing Runnable interface",
            url: "https://www.geeksforgeeks.org/runnable-interface-in-java/",
            img: "https://i.sstatic.net/n1DJO.jpg",
            info: "Another way to create a thread is by implementing the Runnable interface and passing it to a Thread object.",
            code: `
class MyRunnable implements Runnable {
  public void run() {
    for (int i = 1; i <= 5; i++) {
      System.out.println("Runnable Interface: " + i);
    }
  }
}

public class Main {
  public static void main(String[] args) {
    MyRunnable obj = new MyRunnable();
    Thread t = new Thread(obj);
    t.start();
  }
}
`
          },
          {
            title: "Life cycle of a thread",
            url: "https://www.geeksforgeeks.org/lifecycle-and-states-of-a-thread-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20240318155846/Lifecycle-and-States-of-a-Thread-in-Java-1.png",
            info: "The life cycle of a thread includes New, Runnable, Running, Blocked, and Terminated states.",
            code: `
// Simple example with state transition
class Demo extends Thread {
  public void run() {
    System.out.println("Thread running...");
  }

  public static void main(String args[]) {
    Demo t = new Demo(); // New
    t.start();           // Runnable → Running
  }
}
`
          },
          {
            title: "Thread synchronization",
            url: "https://www.geeksforgeeks.org/importance-of-thread-synchronization-in-java/",
            img: "https://d8it4huxumps7.cloudfront.net/bites/wp-content/banners/2024/12/675fc826261f4_thread_synchronization_in_java.jpg?d=700x400",
            info: "Threads in Java can be assigned priorities (MIN_PRIORITY, NORM_PRIORITY, MAX_PRIORITY). Synchronization ensures only one thread accesses a critical section at a time.",
            code: `
// Synchronization example
class Table {
  synchronized void printTable(int n) {
    for (int i = 1; i <= 5; i++) {
      System.out.println(n * i);
    }
  }
}
`
          },
          {
            title: "Thread priority",
            url: "https://www.tutorialspoint.com/java/java_thread_priority.htm",
            img: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTf4tfFRp-qGEVMEZTAtVSCuGu7L-0X7kzZfw&s",
            info: "Threads in Java can be assigned priorities (MIN_PRIORITY, NORM_PRIORITY, MAX_PRIORITY). Synchronization ensures only one thread accesses a critical section at a time.",
            code: `
// Thread priority example
Thread t1 = new Thread(() -> System.out.println("T1"));
Thread t2 = new Thread(() -> System.out.println("T2"));
t1.setPriority(Thread.MIN_PRIORITY);
t2.setPriority(Thread.MAX_PRIORITY);
t1.start();
t2.start();
`
          },
          {
            title: "Exception handing in threads",
            url: "https://www.geeksforgeeks.org/java-program-to-use-exceptions-with-thread/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/threadLifeCycle.jpg",
            info: "Exceptions in threads are handled like normal Java exceptions, typically within the `run()` method using try-catch blocks.",
            code: `
class MyThread extends Thread {
  public void run() {
    try {
      int data = 50 / 0;
    } catch (ArithmeticException e) {
      System.out.println("Exception caught in thread: " + e.getMessage());
    }
  }
}

public class Main {
  public static void main(String[] args) {
    MyThread t = new MyThread();
    t.start();
  }
}
`
          }
        ]
      }
      ,
    ],
  },
  {
    title: "UNIT 6 : File Handling",
    topics: [
      {
        title: "File Handling",
        links: [
          {
            title: "Stream classes",
            url: "https://www.geeksforgeeks.org/stream-in-java/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20230705133732/Stream-in-Java-768.png",
            info: "Java provides two types of stream classes: byte streams (InputStream, OutputStream) and character streams (Reader, Writer) for handling file input and output.",
            code: `
import java.io.FileInputStream;
import java.io.FileOutputStream;

public class ByteStreamDemo {
  public static void main(String[] args) {
    try {
      FileOutputStream fos = new FileOutputStream("test.txt");
      fos.write("Hello Byte Stream".getBytes());
      fos.close();

      FileInputStream fis = new FileInputStream("test.txt");
      int i;
      while ((i = fis.read()) != -1) {
        System.out.print((char) i);
      }
      fis.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
`
          },
          {
            title: "Class hierarchy",
            url: "https://www.geeksforgeeks.org/generic-class-hierarchies-in-java/",
            img: "https://www.tutorialspoint.com/java/images/file_io.jpg",
            info: "The I/O classes follow a hierarchy where InputStream and OutputStream are superclasses for byte streams, and Reader and Writer are for character streams.",
            code: `
// Hierarchy Example:
InputStream  → FileInputStream, BufferedInputStream
OutputStream → FileOutputStream, PrintStream
Reader       → FileReader, BufferedReader
Writer       → FileWriter, BufferedWriter
// You typically use BufferedReader with FileReader for efficient reading.
`
          },
          {
            title: "Useful I/O classes",
            url: "https://www.geeksforgeeks.org/java-io-packag/",
            img: "https://www.tutorialspoint.com/assets/questions/images/45438-1515056318.jpg",
            info: "Some of the most commonly used I/O classes are: File, FileReader, FileWriter, BufferedReader, BufferedWriter, Scanner, and PrintWriter.",
            code: `
import java.io.*;

public class UsefulIOClasses {
  public static void main(String[] args) {
    try {
      // Using FileWriter and BufferedWriter
      BufferedWriter writer = new BufferedWriter(new FileWriter("file.txt"));
      writer.write("Using BufferedWriter in Java");
      writer.close();

      // Using BufferedReader
      BufferedReader reader = new BufferedReader(new FileReader("file.txt"));
      String line;
      while ((line = reader.readLine()) != null) {
        System.out.println(line);
      }
      reader.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }
}
`
          },
          {
            title: "Creation of text file",
            url: "https://www.geeksforgeeks.org/java-program-to-create-a-new-file/",
            img: "https://media.geeksforgeeks.org/wp-content/uploads/20241219172401672095/CreateFileUsingFile.PNG",
            info: "Text files in Java can be created using `FileWriter`, `PrintWriter`, or `BufferedWriter` classes.",
            code: `
import java.io.File;
import java.io.IOException;

public class FileCreation {
  public static void main(String[] args) {
    try {
      File file = new File("example.txt");
      if (file.createNewFile()) {
        System.out.println("File created: " + file.getName());
      } else {
        System.out.println("File already exists.");
      }
    } catch (IOException e) {
      e.printStackTrace();
    }
  }
}
`
          },
          {
            title: "Reading and writing text files",
            url: "https://www.geeksforgeeks.org/different-ways-reading-text-file-java/",
            img: "https://www.homeandlearn.co.uk/java/images/textfiles/ReadFile_openfile4.gif",
            info: "Java provides several ways to read and write text files, the most common being BufferedReader/Writer and FileReader/Writer.",
            code: `
import java.io.*;

public class ReadWriteTextFile {
  public static void main(String[] args) {
    try {
      // Writing to file
      FileWriter writer = new FileWriter("data.txt");
      writer.write("Hello, File Handling in Java!");
      writer.close();

      // Reading from file
      FileReader reader = new FileReader("data.txt");
      int ch;
      while ((ch = reader.read()) != -1) {
        System.out.print((char) ch);
      }
      reader.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }
}
`
          }
        ]
      }
      ,
    ],
  },
];

function DiplomaSE() {
  const [openUnits, setOpenUnits] = useState({});
  const [openTopics, setOpenTopics] = useState({});
  const [openImage, setOpenImage] = useState(null);
  const [showDetails, setShowDetails] = useState({});

  const openModal = (imgUrl) => {
    setOpenImage(imgUrl);
  };

  const closeModal = () => {
    setOpenImage(null);
  };
  function toggleUnit(index) {
    setOpenUnits((prev) => ({ ...prev, [index]: !prev[index] }));
  }

  function toggleTopic(index) {
    setOpenTopics((prev) => ({ ...prev, [index]: !prev[index] }));
  }
  const toggleDetails = (topicKey, index) => {
    setShowDetails((prevState) => ({
      ...prevState,
      [`${topicKey}-${index}`]: !prevState[`${topicKey}-${index}`],
    }));
  };

  return (
    <div className="java-wrapper">
      <div className="java-card">
        <div className="java-title">Diploma - Java</div>

        {units.map((unit, uIndex) => (
          <div key={uIndex} className="java-section cursor-pointer">
            <h2 className="java-subtitle" onClick={() => toggleUnit(uIndex)}>
              {unit.title}
            </h2>
            {openUnits[uIndex] && (
              <div className="java-unit-grid">
                {unit.topics.map((topic, tIndex) => {
                  const topicKey = `${uIndex}-${tIndex}`;
                  return (
                    <div className="java-grid-item structured" key={topicKey}>
                      <h3 onClick={() => toggleTopic(topicKey)}>
                        ➤ {topic.title}
                      </h3>
                      {openTopics[topicKey] && (
                        <div>
                          {topic.links.map((link, index) => (
                            <div
                              className="itemJava rounded-2xl shadow-lg flex flex-row justify-between align-start"
                              key={index}
                              style={{ position: "relative" }}
                            >

                              <div className="itemTitle">
                                <p className="java-Text2" onClick={() => toggleDetails(topicKey, index)}>📌{link.title}</p>
                                <button className="infoBtnJava" onClick={() => window.open(link.url)} target="_blank">🌐Know more</button>
                              </div>
                              {showDetails[`${topicKey}-${index}`] && (
                                <div className="itemToggle">
                                  {link.info && <div className="java-card2" style={{ width: "90%" }}>{link.info}</div>}
                                  {link.code && <pre style={{ width: "90%", margin: "auto", marginTop: "20px" }}>{link.code}</pre>}
                                  {link.img && <img
                                  className="tinyImgJava"
                                  src={link.img}
                                  alt="thumbnail"
                                  onClick={() => openModal(link.img)}
                                  />}
                                </div>
                              )}

                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        ))}
      </div>

      {openImage && (
        <div className="image-modal" onClick={closeModal}>
          <div className="modal-content" onClick={closeModal}>
            <img className="modal-image" style={{scale:"1.5"}} src={openImage} alt="Full view" />
          </div>
        </div>
      )}
    </div>
  );
}

export default DiplomaSE;
