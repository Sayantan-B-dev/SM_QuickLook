import React from "react";
import "../../../../CSS/OS.css";

function LinkerLoaderObjectFile() {
  return (
    <div className="os-wrapper">
      <div className="os-card">
        <h1 className="os-title">Linker, Loader & Object File Structure</h1>
        <pre style={{marginBottom:"20px"}}>
            {`[HLL(High Level Language)] ---> [Compiler] --> [Linker] ---> [Loader] ---> [Memory])`}
        </pre>
        {/* Linker */}
        <div className="os-section">
          <h2 className="os-subtitle">What is a Linker?</h2>
          <p className="os-example">
            A <strong>Linker</strong> combines multiple object files into a single executable. It resolves external symbols, assigns final memory addresses, and modifies code/data to reflect these addresses (relocation).
            <br />
            It links:
            <ul>
              <li>Multiple compiled files</li>
              <li>Library functions (like printf)</li>
              <li>External modules</li>
            </ul>
            <pre>{`
Example:
main.o --> contains main()
math.o --> contains add()
Linker combines them --> final.exe
            `}</pre>
          </p>
        </div>

        {/* Loader */}
        <div className="os-section">
          <h2 className="os-subtitle">What is a Loader?</h2>
          <p className="os-example">
            A <strong>Loader</strong> is responsible for loading the executable into memory, allocating space, and initializing registers. It is a part of the OS.
            <br />
            It performs:
            <ul>
              <li>Memory allocation</li>
              <li>Relocation (adjusting absolute addresses)</li>
              <li>Setting up stack and heap</li>
              <li>Transfer control to the program</li>
            </ul>
          </p>
        </div>

        {/* Object File */}
        <div className="os-section">
          <h2 className="os-subtitle">Object File Format & Its Parts</h2>
          <p className="os-example">
            An object file is a binary file generated by a compiler or assembler. It typically contains the following:
            <ul>
              <li><strong>1. Header:</strong> Metadata like file format (ELF, COFF), target architecture</li>
              <li><strong>2. Text Section:</strong> Contains machine code (binary instructions)</li>
              <li><strong>3. Data Section:</strong> Initialized global and static variables</li>
              <li><strong>4. BSS Section:</strong> Uninitialized global/static variables (allocated at runtime)</li>
              <li><strong>5. Symbol Table:</strong> List of variable/function names and addresses (used by linker)</li>
              <li><strong>6. Relocation Information:</strong> Addresses needing updates after linking</li>
              <li><strong>7. Debugging Info:</strong> Line numbers, variable names, comments for debugging tools</li>
            </ul>

            <pre>{`
Example (pseudo object structure):
-----------------------------------------------------
| Header | Text | Data | BSS | Symbols | Reloc | Debug |
-----------------------------------------------------
            `}</pre>
          </p>
        </div>

        {/* Example with Diagram */}
        <div className="os-section">
          <h2 className="os-subtitle">Detailed Example</h2>
          <pre>{`
C Code:
int x = 10;         // Goes to .data
int y;              // Goes to .bss
int main() {
  return x;
}                   // Code goes to .text
          `}</pre>
          <p className="os-example">
            <strong>Text section:</strong> Binary code of main() function<br />
            <strong>Data section:</strong> Initialized variable x<br />
            <strong>BSS section:</strong> Uninitialized variable y<br />
            <strong>Symbol Table:</strong> Names and addresses of x, y, main<br />
            <strong>Relocation:</strong> If the symbol "x" is referenced elsewhere<br />
            <strong>Debug Info:</strong> Helps trace errors with gdb<br />
          </p>
        </div>


          <img
          className="smallImg"
            src="https://media.geeksforgeeks.org/wp-content/uploads/20200808221828/llgfg.png"
            alt="Object File Structure Diagram"
          />
          <button
            className="infoBtn"
            onClick={() =>
              window.open(
                "https://www.geeksforgeeks.org/difference-between-linker-and-loader/"
              )
            }
          >
            Know more
          </button>
      </div>
    </div>
  );
}

export default LinkerLoaderObjectFile;
